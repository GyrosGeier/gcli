.Dd $Mdocdate$
.Dt GHCLI 1
.Os
.Sh NAME
.Nm ghcli
.Nd is a command-line utility to interact with GitHub without using a web-browser.
.Sh SYNOPSIS

.Nm
.Cm issues
.Op Fl o Ar user-or-organization Fl r Ar repository Op Fl a
.Op Fl i Ar issue

.Nm
.Cm pulls
.Op Fl o Ar user-or-organization Fl r Ar repository Op Fl a
.Op Fl p Ar #PR Ar ...

.Sh DESCRIPTION
The
.Nm
retrieves or submits data to the GitHub API to list issues and
pull requests on specific
.Xr git 1
repositories hosted on GitHub.

.Sh SUBCOMMANDS
.Bl -tag -width indent

.It Cm issues
lists open issues on the given or auto-detected repository.
If
.Fl a
was specified, all issues including closed ones, are listed.
.Fl i
can be used to fetch detailed information about a single issue.
You can specify one or more operations:

.Bl -tag -width indent
.It Cm summary
Print a summary.
.It Cm comments
Print the comment section of the issue.
.El

.It Cm pulls
lists open pull requests on the given repository.

The repository can be either specified through the
.Fl o
and
.Fl r
flags or, if unspecified,
.Nm
will try to autodetect the correct remote using the git config.

If a PR number is specified, you can append one or more of the
following operations to perform on the given pull request:

.Bl -tag -width indent
.It Cm summary
Print a summary.
.It Cm comments
Print the comment section of the PR.
.It Cm diff
Print the PR diff.
.El

.El

.Sh OPTIONS
.Bl -tag -width indent

.It Fl a
Fetch all data, including closed issues and closed/merged PRs.

.It Fl o Ar org
Operate on the given organization/user.
Can only be used in combination with
.Fl r .

.It Fl r Ar repo
Operate on the given repository.
Can only be used in combination with
.Fl o .

.It Fl i Ar id
Operate on the given issue number.

.It Fl p Ar pr
Operate on the given pull request.

.El

.\" .Sh IMPLEMENTATION NOTES
.\" Not used in OpenBSD.
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.Sh FILES
.Bl -tag -width ${XDG_CONFIG_DIR}/ghcli/config -compact

.It Pa ${XDG_CONFIG_DIR}/ghcli/config
The config file for
.Nm
It shall contain the following data:

.Bd -literal
api_token=<valid github api token>
editor=/path/to/gnoooo/emacs
.Ed

If editor is not set in the config file,
.Nm
will use
.Ev EDITOR
from the environment.

.El



.\" .Sh EXIT STATUS
.\" For sections 1, 6, and 8 only.
.Sh EXAMPLES
Look at PR #78 in vim/colorschemes:

ghcli pulls -o vim -r colorschemes -p 78 summary comments | less

.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.

.Sh SEE ALSO
.Xr git 1

.\" .Sh STANDARDS
.Sh HISTORY
The idea for
.Nm
appeared during a long rant on IRC where the issue with the official
tool written by GitHub became clear to be the manual dialing and DNS
resolving by the Go runtime, circumventing almost the entirety of the
OS TCP/IP stack and leaking sensitive information when using Tor.

Implementation started in October 2021 with the goal of having a
decent, sufficiently portable and secure version of a cli utility to
interact with the GitHub world without using the horrible web
interface.

.Sh AUTHORS
.An Nico Sonack aka. herrhotzenplotz Aq Mt nsonack@outlook.com
.\" .Sh CAVEATS

.Sh BUGS
Not yet finished.
Error messages are poor.
Man page is poor.

.Sh SECURITY CONSIDERATIONS
It is written in C. If it were written in Rust, it would have been
much safer.
